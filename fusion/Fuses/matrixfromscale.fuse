-- ============================================================================
-- modules
-- ============================================================================
local matrix = self and require("matrix") or nil
local matrixutils = self and require("matrixutils") or nil

-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "MatrixFromScale"
DATATYPE = "Text"
INP1_MAXSCALE = 5

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Matrix",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Creates a scale matrix.",
    REGS_OpIconString = FUSE_NAME
})

function Create()

    self:BeginControlNest( "Scale" , "Scale" , true , { LBLC_PickButton = false } )

        -- InLabel = self:AddInput( "Scale" , "Scale" , {
            -- LINKID_DataType = "Number",
            -- INPID_InputControl = "LabelControl",
            -- INP_External = false,
            -- INP_Passive = true,
            -- LBLC_DropDownButton = true,
            -- LBLC_NumInputs = 3,
            -- LBLC_NestLevel = 1,
            -- INP_Default = 1,
        -- } )

        -- This one should appear at the top of the nest. Currently it doesn't and I don't know why
        -- InLockXYZ = self:AddInput( "Lock X/Y/Z" , "LockXYZ" , {
            -- LINKID_DataType = "Number",
            -- INPID_InputControl = "CheckboxControl",
            -- INP_Integer = true,
            -- INP_Default = 1.0,
            -- ICD_Width = 1,
        -- } )
        
        ScaleX = self:AddInput( "X Scale" , "Scale.X" , {
            LINKID_DataType = "Number",
            --INP_Passive = true,
            INPID_InputControl = "SliderControl",
            INP_Integer = false,
            INP_Default = 1.0,
            INP_MinScale = 0,
            INP_MaxScale = INP1_MAXSCALE,
            LINK_Main = 1
        } )

        ScaleY = self:AddInput( "Y Scale" , "Scale.Y" , {
            LINKID_DataType = "Number",
            --INP_Passive = true,
            INPID_InputControl = "SliderControl",
            INP_Integer = false,
            INP_Default = 1.0,
            INP_MinScale = 0,
            INP_MaxScale = INP1_MAXSCALE,
            LINK_Main = 2
        } )

        ScaleZ = self:AddInput( "Z Scale" , "Scale.Z" , {
            LINKID_DataType = "Number",
            --INP_Passive = true,
            INPID_InputControl = "SliderControl",
            INP_Integer = false,
            INP_Default = 1.0,
            INP_MinScale = 0,
            INP_MaxScale = INP1_MAXSCALE,
            LINK_Main = 3
        } )

    self:EndControlNest()

    InShowInput = self:AddInput("Show Input", "ShowInput", {
        LINKID_DataType = "Number",
        INPID_InputControl = "CheckboxControl",
        INP_Integer = true,
        INP_Default = 1.0,
        INP_External = false,
        INP_DoNotifyChanged = true
    })
    
    OutMatrix = self:AddOutput( "Matrix" , "Matrix" , {
        LINKID_DataType = "Text",
        INPID_InputControl = "TextEditControl",
        LINK_Main = 1
    } )

end

-- =============================================================================
-- utils
-- =============================================================================
    
-- =============================================================================
-- main
-- =============================================================================
function NotifyChanged(inp, param, time)
    --[[
        Handles all input control events.

        :param inp: Input that triggered a signal.
        :type inp: Input

        :param param: Parameter object holding the (new) value.
        :type param: Parameter

        :param time: Current frame number.
        :type time: float
    ]]
    if inp == InShowInput then
        local visible
        if param.Value == 1.0 then visible = true else visible = false end
        ScaleX:SetAttrs({LINK_Visible = visible})
        ScaleY:SetAttrs({LINK_Visible = visible})
        ScaleZ:SetAttrs({LINK_Visible = visible})
    end
end

function Process( req )

    local scale_x = ScaleX:GetValue( req ).Value
    local scale_y = ScaleY:GetValue( req ).Value
    local scale_z = ScaleZ:GetValue( req ).Value

    local mx_scale = matrix{
        { scale_x , 0.0     , 0.0     , 0.0 } ,
        { 0.0     , scale_y , 0.0     , 0.0 } ,
        { 0.0     , 0.0     , scale_z , 0.0 } ,
        { 0.0     , 0.0     , 0.0     , 1.0 }
    }

    local output_matrix = matrixutils.matrix_to_string( mx_scale )

    OutMatrix:Set( req , Text( output_matrix ) )

end